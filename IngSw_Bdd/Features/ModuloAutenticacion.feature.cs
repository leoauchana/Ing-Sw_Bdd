// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace IngSw_Bdd.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ModuloDeAutenticacionFeature : object, Xunit.IClassFixture<ModuloDeAutenticacionFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Modulo de Autenticacion", "  Este modulo se enfoca en regitrar al usuario e identificarlo para darle acceso " +
                "a las\r\n  actuvidades que le corresponden.", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "ModuloAutenticacion.feature"
#line hidden
        
        public ModuloDeAutenticacionFeature(ModuloDeAutenticacionFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 5
  #line hidden
            global::Reqnroll.Table table1 = new global::Reqnroll.Table(new string[] {
                        "email",
                        "password",
                        "rol"});
            table1.AddRow(new string[] {
                        "usuario@gmail.com",
                        "contrasena",
                        "Medico"});
            table1.AddRow(new string[] {
                        "usuario1@gmail.com",
                        "contrasena1",
                        "Enfermera"});
            table1.AddRow(new string[] {
                        "usuario2@gmail.com",
                        "contrasena2",
                        "Medico"});
            table1.AddRow(new string[] {
                        "usuario3@gmail.com",
                        "contrasena3",
                        "Enfermera"});
#line 6
    await testRunner.GivenAsync("Existen los siguientes usuarios en el sistema:", ((string)(null)), table1, "Given ");
#line hidden
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="El usuario se registra en el sistema")]
        [Xunit.TraitAttribute("FeatureTitle", "Modulo de Autenticacion")]
        [Xunit.TraitAttribute("Description", "El usuario se registra en el sistema")]
        public async System.Threading.Tasks.Task ElUsuarioSeRegistraEnElSistema()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("El usuario se registra en el sistema", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 13
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
  await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table2 = new global::Reqnroll.Table(new string[] {
                            "email",
                            "password",
                            "rol"});
                table2.AddRow(new string[] {
                            "samuelito@gmail.com",
                            "contrasena123",
                            ""});
#line 14
      await testRunner.GivenAsync("que el usuario ingreso los siguientes datos:", ((string)(null)), table2, "Given ");
#line hidden
#line 17
      await testRunner.WhenAsync("la contrase�a esta hasheada", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table3 = new global::Reqnroll.Table(new string[] {
                            "email",
                            "password",
                            "rol"});
                table3.AddRow(new string[] {
                            "usuario@gmail.com",
                            "contrasena",
                            "Medico"});
                table3.AddRow(new string[] {
                            "usuario1@gmail.com",
                            "contrasena1",
                            "Enfermera"});
                table3.AddRow(new string[] {
                            "usuario2@gmail.com",
                            "contrasena2",
                            "Medico"});
                table3.AddRow(new string[] {
                            "usuario3@gmail.com",
                            "contrasena3",
                            "Enfermera"});
                table3.AddRow(new string[] {
                            "samuelito@gmail.com",
                            "contrasena123",
                            ""});
#line 18
      await testRunner.ThenAsync("el sistema registra el usuario", ((string)(null)), table3, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="El usuario se loguea correctamente")]
        [Xunit.TraitAttribute("FeatureTitle", "Modulo de Autenticacion")]
        [Xunit.TraitAttribute("Description", "El usuario se loguea correctamente")]
        public async System.Threading.Tasks.Task ElUsuarioSeLogueaCorrectamente()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("El usuario se loguea correctamente", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 26
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
  await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table4 = new global::Reqnroll.Table(new string[] {
                            "email",
                            "password"});
                table4.AddRow(new string[] {
                            "samuelito@gmail.com",
                            "contrasena123"});
#line 27
      await testRunner.GivenAsync("que el usuario ingresa los siguientes datos:", ((string)(null)), table4, "Given ");
#line hidden
#line 30
      await testRunner.WhenAsync("el usuario se loguea correctamente", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 31
      await testRunner.ThenAsync("el sistema lanza una alerta de logueo exitoso", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="El usuario o password es invalido")]
        [Xunit.TraitAttribute("FeatureTitle", "Modulo de Autenticacion")]
        [Xunit.TraitAttribute("Description", "El usuario o password es invalido")]
        public async System.Threading.Tasks.Task ElUsuarioOPasswordEsInvalido()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("El usuario o password es invalido", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 33
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
  await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table5 = new global::Reqnroll.Table(new string[] {
                            "email",
                            "password"});
                table5.AddRow(new string[] {
                            "samuelito@gmail.com",
                            "incorrecta"});
#line 34
      await testRunner.GivenAsync("que el usuario ingresa los siguientes datos:", ((string)(null)), table5, "Given ");
#line hidden
#line 37
      await testRunner.WhenAsync("el usuario intenta loguearse", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 38
      await testRunner.ThenAsync("el sistema lanza una alerta de usuario invalido", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await ModuloDeAutenticacionFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await ModuloDeAutenticacionFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
