// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace IngSw_Bdd.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ModuloDeReclamoDePacienteFeature : object, Xunit.IClassFixture<ModuloDeReclamoDePacienteFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Modulo de Reclamo de Paciente", "    Esta caracteristica esta relacionada con que el medico pueda visualizar los p" +
                "acientes en\r\n    la lista de ingresos que debe atender, poder seleccionar uno de" +
                " la lista para atenderlo y\r\n    registrar un informe de atencion.", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "ModuloReclamo.feature"
#line hidden
        
        public ModuloDeReclamoDePacienteFeature(ModuloDeReclamoDePacienteFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 6
  #line hidden
            global::Reqnroll.Table table6 = new global::Reqnroll.Table(new string[] {
                        "Nombre",
                        "Apellido"});
            table6.AddRow(new string[] {
                        "Enrique",
                        "Olmos"});
#line 7
    await testRunner.GivenAsync("que se encuentra registrado el medico:", ((string)(null)), table6, "Given ");
#line hidden
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="El medico reclama un paciente de la lista")]
        [Xunit.TraitAttribute("FeatureTitle", "Modulo de Reclamo de Paciente")]
        [Xunit.TraitAttribute("Description", "El medico reclama un paciente de la lista")]
        public async System.Threading.Tasks.Task ElMedicoReclamaUnPacienteDeLaLista()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("El medico reclama un paciente de la lista", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 12
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
  await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table7 = new global::Reqnroll.Table(new string[] {
                            "CUIL",
                            "Enfermera",
                            "Informe",
                            "Nivel de Emergencia"});
                table7.AddRow(new string[] {
                            "20-12345679-8",
                            "Maria Luz, Del Valle",
                            "Tiene dengue",
                            "Urgencia"});
                table7.AddRow(new string[] {
                            "20-12345678-8",
                            "Maria Luz, Del Valle",
                            "Tiene covid",
                            "Urgencia"});
                table7.AddRow(new string[] {
                            "20-12345677-8",
                            "Maria Luz, Del Valle",
                            "Tiene diarrea",
                            "Urgencia"});
                table7.AddRow(new string[] {
                            "20-12345676-8",
                            "Maria Luz, Del Valle",
                            "Tiene vomitos",
                            "Urgencia"});
#line 13
      await testRunner.GivenAsync("la siguiente lista de espera:", ((string)(null)), table7, "Given ");
#line hidden
#line 19
      await testRunner.WhenAsync("el medico reclama el proximo paciente", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table8 = new global::Reqnroll.Table(new string[] {
                            "CUIL",
                            "Enfermera",
                            "Informe",
                            "Nivel de Emergencia"});
                table8.AddRow(new string[] {
                            "20-12345678-8",
                            "Maria Luz, Del Valle",
                            "Tiene covid",
                            "Urgencia"});
                table8.AddRow(new string[] {
                            "20-12345677-8",
                            "Maria Luz, Del Valle",
                            "Tiene diarrea",
                            "Urgencia"});
                table8.AddRow(new string[] {
                            "20-12345676-8",
                            "Maria Luz, Del Valle",
                            "Tiene vomitos",
                            "Urgencia"});
#line 20
      await testRunner.ThenAsync("el paciente sale de la lista:", ((string)(null)), table8, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="El medico reclama un paciente y no hay ninguno en espera")]
        [Xunit.TraitAttribute("FeatureTitle", "Modulo de Reclamo de Paciente")]
        [Xunit.TraitAttribute("Description", "El medico reclama un paciente y no hay ninguno en espera")]
        public async System.Threading.Tasks.Task ElMedicoReclamaUnPacienteYNoHayNingunoEnEspera()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("El medico reclama un paciente y no hay ninguno en espera", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 26
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
  await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table9 = new global::Reqnroll.Table(new string[] {
                            "CUIL",
                            "Enfermera",
                            "Informe",
                            "Nivel de Emergencia"});
#line 27
      await testRunner.GivenAsync("la siguiente lista de espera:", ((string)(null)), table9, "Given ");
#line hidden
#line 29
      await testRunner.WhenAsync("el medico reclama el proximo paciente", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 30
      await testRunner.ThenAsync("se envia un mensaje de que la lista de espera esta vacia", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await ModuloDeReclamoDePacienteFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await ModuloDeReclamoDePacienteFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
