// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace IngSw_Bdd.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class RegistrarPacientesFeature : object, Xunit.IClassFixture<RegistrarPacientesFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Registrar Pacientes", "    Como enfermera.\r\n    Quiero registrar pacientes.\r\n    Para poder realizar el " +
                "ingreso a urgencias o buscarlos durante un ingreso en \r\n    caso de que el pacie" +
                "nte aparezca en urgencia más de una vez.", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "RegistroPacientes.feature"
#line hidden
        
        public RegistrarPacientesFeature(RegistrarPacientesFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 8
    #line hidden
            global::Reqnroll.Table table32 = new global::Reqnroll.Table(new string[] {
                        "Nombre",
                        "Apellido"});
            table32.AddRow(new string[] {
                        "Ana",
                        "Gomez"});
#line 9
        await testRunner.GivenAsync("que la siguiente enfermera esta registrada:", ((string)(null)), table32, "Given ");
#line hidden
#line 12
        await testRunner.AndAsync("esta registrando un nuevo paciente", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Registro exitoso con todos los datos y obra social exitente")]
        [Xunit.TraitAttribute("FeatureTitle", "Registrar Pacientes")]
        [Xunit.TraitAttribute("Description", "Registro exitoso con todos los datos y obra social exitente")]
        public async System.Threading.Tasks.Task RegistroExitosoConTodosLosDatosYObraSocialExitente()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Registro exitoso con todos los datos y obra social exitente", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 14
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 8
    await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table33 = new global::Reqnroll.Table(new string[] {
                            "Cuil",
                            "Apellido",
                            "Nombre",
                            "Calle",
                            "Numero",
                            "Localidad",
                            "Obra Social",
                            "Numero Afiliado"});
                table33.AddRow(new string[] {
                            "23-00000000-3",
                            "Perez",
                            "Pablo",
                            "Av. Roca",
                            "100",
                            "San Miguel de Tucuman",
                            "Red de Seguros",
                            "174853-0"});
#line 15
        await testRunner.GivenAsync("que se completan todos los datos obligatorios del paciente", ((string)(null)), table33, "Given ");
#line hidden
#line 18
        await testRunner.AndAsync("la obra social \"Red de Seguros\" exite", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 19
        await testRunner.AndAsync("el paciente esta afiliado a esa obra social", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 20
        await testRunner.WhenAsync("confirma el registro del paciente", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 21
        await testRunner.ThenAsync("el paciente queda registrado como nuevo ingreso", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Registro exitoso con todos los datos y sin obra social")]
        [Xunit.TraitAttribute("FeatureTitle", "Registrar Pacientes")]
        [Xunit.TraitAttribute("Description", "Registro exitoso con todos los datos y sin obra social")]
        public async System.Threading.Tasks.Task RegistroExitosoConTodosLosDatosYSinObraSocial()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Registro exitoso con todos los datos y sin obra social", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 24
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 8
    await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table34 = new global::Reqnroll.Table(new string[] {
                            "Cuil",
                            "Apellido",
                            "Nombre",
                            "Calle",
                            "Numero",
                            "Localidad",
                            "Obra Social",
                            "Numero Afiliado"});
                table34.AddRow(new string[] {
                            "23-00000000-3",
                            "Perez",
                            "Pablo",
                            "Av. Roca",
                            "100",
                            "San Miguel de Tucuman",
                            "",
                            ""});
#line 25
        await testRunner.GivenAsync("que se completan todos los datos obligatorios del paciente", ((string)(null)), table34, "Given ");
#line hidden
#line 28
        await testRunner.AndAsync("no se indica obra social", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 29
        await testRunner.WhenAsync("confirma el registro del paciente", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 30
        await testRunner.ThenAsync("el paciente queda registrado como nuevo ingreso", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 31
        await testRunner.AndAsync("sin obra social", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Registro de paciente con obra social inexistente")]
        [Xunit.TraitAttribute("FeatureTitle", "Registrar Pacientes")]
        [Xunit.TraitAttribute("Description", "Registro de paciente con obra social inexistente")]
        public async System.Threading.Tasks.Task RegistroDePacienteConObraSocialInexistente()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Registro de paciente con obra social inexistente", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 33
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 8
    await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table35 = new global::Reqnroll.Table(new string[] {
                            "Cuil",
                            "Apellido",
                            "Nombre",
                            "Calle",
                            "Numero",
                            "Localidad",
                            "Obra Social",
                            "Numero Afiliado"});
                table35.AddRow(new string[] {
                            "23-00000000-3",
                            "Perez",
                            "Pablo",
                            "Av. Roca",
                            "100",
                            "San Miguel de Tucuman",
                            "Cromax Seguros",
                            "12345"});
#line 34
        await testRunner.GivenAsync("que se completan todos los datos obligatorios del paciente", ((string)(null)), table35, "Given ");
#line hidden
#line 37
        await testRunner.AndAsync("la obra social \"Cromax Seguros\" no existe", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 38
        await testRunner.WhenAsync("confirma el registro del paciente", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 39
        await testRunner.ThenAsync("se muestra un mensaje de error notificando: \"No se puede registrar al paciente, d" +
                        "ebido a que no exite la obra social ingresada\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Registro del paciente con obra social existente pero sin afiliacion")]
        [Xunit.TraitAttribute("FeatureTitle", "Registrar Pacientes")]
        [Xunit.TraitAttribute("Description", "Registro del paciente con obra social existente pero sin afiliacion")]
        public async System.Threading.Tasks.Task RegistroDelPacienteConObraSocialExistentePeroSinAfiliacion()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Registro del paciente con obra social existente pero sin afiliacion", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 41
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 8
    await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table36 = new global::Reqnroll.Table(new string[] {
                            "Cuil",
                            "Apellido",
                            "Nombre",
                            "Calle",
                            "Numero",
                            "Localidad",
                            "Obra Social",
                            "Numero Afiliado"});
                table36.AddRow(new string[] {
                            "23-00000000-3",
                            "Perez",
                            "Pablo",
                            "Av. Roca",
                            "100",
                            "San Miguel de Tucuman",
                            "Red de Seguros",
                            "174853-0"});
#line 42
        await testRunner.GivenAsync("que se completan todos los datos obligatorios del paciente", ((string)(null)), table36, "Given ");
#line hidden
#line 45
        await testRunner.AndAsync("el paciente no esta afiliado a la obra social \"Red de Seguros\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 46
        await testRunner.WhenAsync("confirma el registro del paciente", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 47
        await testRunner.ThenAsync("se muestra un mensaje de error notificando: \"No se puede registrar al paciente, d" +
                        "ebido a que no esta afiliado a la obra social ingresada\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Registro de paciente con dato mandatorio \"Nombre\" omitido")]
        [Xunit.TraitAttribute("FeatureTitle", "Registrar Pacientes")]
        [Xunit.TraitAttribute("Description", "Registro de paciente con dato mandatorio \"Nombre\" omitido")]
        public async System.Threading.Tasks.Task RegistroDePacienteConDatoMandatorioNombreOmitido()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Registro de paciente con dato mandatorio \"Nombre\" omitido", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 50
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 8
    await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table37 = new global::Reqnroll.Table(new string[] {
                            "Cuil",
                            "Apellido",
                            "Nombre",
                            "Calle",
                            "Numero",
                            "Localidad",
                            "Obra Social",
                            "Numero Afiliado"});
                table37.AddRow(new string[] {
                            "23-00000000-3",
                            "Perez",
                            "",
                            "Av. Roca",
                            "100",
                            "San Miguel de Tucuman",
                            "Red de Seguros",
                            "174853-0"});
#line 51
        await testRunner.GivenAsync("que se completan parcialmente los datos obligatorios del paciente", ((string)(null)), table37, "Given ");
#line hidden
#line 54
        await testRunner.WhenAsync("confirma el registro del paciente", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 55
        await testRunner.ThenAsync("se notifica que falta completar el campo \"Nombre\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Registro de paciente con dato mandatorio \"Apellido\" omitido")]
        [Xunit.TraitAttribute("FeatureTitle", "Registrar Pacientes")]
        [Xunit.TraitAttribute("Description", "Registro de paciente con dato mandatorio \"Apellido\" omitido")]
        public async System.Threading.Tasks.Task RegistroDePacienteConDatoMandatorioApellidoOmitido()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Registro de paciente con dato mandatorio \"Apellido\" omitido", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 57
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 8
    await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table38 = new global::Reqnroll.Table(new string[] {
                            "Cuil",
                            "Apellido",
                            "Nombre",
                            "Calle",
                            "Numero",
                            "Localidad",
                            "Obra Social",
                            "Numero Afiliado"});
                table38.AddRow(new string[] {
                            "23-00000000-3",
                            "",
                            "Pablo",
                            "Av. Roca",
                            "100",
                            "San Miguel de Tucuman",
                            "Red de Seguros",
                            "174853-0"});
#line 58
        await testRunner.GivenAsync("que se completan parcialmente los datos obligatorios del paciente", ((string)(null)), table38, "Given ");
#line hidden
#line 61
        await testRunner.WhenAsync("confirma el registro del paciente", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 62
        await testRunner.ThenAsync("se notifica que falta completar el campo \"Apellido\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Registro de paciente con dato mandatorio \"Cuil\" omitido")]
        [Xunit.TraitAttribute("FeatureTitle", "Registrar Pacientes")]
        [Xunit.TraitAttribute("Description", "Registro de paciente con dato mandatorio \"Cuil\" omitido")]
        public async System.Threading.Tasks.Task RegistroDePacienteConDatoMandatorioCuilOmitido()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Registro de paciente con dato mandatorio \"Cuil\" omitido", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 64
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 8
    await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table39 = new global::Reqnroll.Table(new string[] {
                            "Cuil",
                            "Apellido",
                            "Nombre",
                            "Calle",
                            "Numero",
                            "Localidad",
                            "Obra Social",
                            "Numero Afiliado"});
                table39.AddRow(new string[] {
                            "",
                            "Perez",
                            "Pablo",
                            "Av. Roca",
                            "100",
                            "San Miguel de Tucuman",
                            "Red de Seguros",
                            "174853-0"});
#line 65
        await testRunner.GivenAsync("que se completan parcialmente los datos obligatorios del paciente", ((string)(null)), table39, "Given ");
#line hidden
#line 68
        await testRunner.WhenAsync("confirma el registro del paciente", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 69
        await testRunner.ThenAsync("se notifica que falta completar el campo \"Cuil\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Registro de paciente con dato mandatorio  \"Calle\" omitido")]
        [Xunit.TraitAttribute("FeatureTitle", "Registrar Pacientes")]
        [Xunit.TraitAttribute("Description", "Registro de paciente con dato mandatorio  \"Calle\" omitido")]
        public async System.Threading.Tasks.Task RegistroDePacienteConDatoMandatorioCalleOmitido()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Registro de paciente con dato mandatorio  \"Calle\" omitido", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 71
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 8
    await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table40 = new global::Reqnroll.Table(new string[] {
                            "Cuil",
                            "Apellido",
                            "Nombre",
                            "Calle",
                            "Numero",
                            "Localidad",
                            "Obra Social",
                            "Numero Afiliado"});
                table40.AddRow(new string[] {
                            "23-00000000-3",
                            "Perez",
                            "Pablo",
                            "",
                            "100",
                            "San Miguel de Tucuman",
                            "Red de Seguros",
                            "174853-0"});
#line 72
            await testRunner.GivenAsync("que se completan parcialmente los datos obligatorios del paciente", ((string)(null)), table40, "Given ");
#line hidden
#line 75
            await testRunner.WhenAsync("confirma el registro del paciente", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 76
            await testRunner.ThenAsync("se notifica que falta completar el campo \"Calle\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Registro de paciente con dato mandatorio  \"Numero\" omitido")]
        [Xunit.TraitAttribute("FeatureTitle", "Registrar Pacientes")]
        [Xunit.TraitAttribute("Description", "Registro de paciente con dato mandatorio  \"Numero\" omitido")]
        public async System.Threading.Tasks.Task RegistroDePacienteConDatoMandatorioNumeroOmitido()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Registro de paciente con dato mandatorio  \"Numero\" omitido", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 78
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 8
    await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table41 = new global::Reqnroll.Table(new string[] {
                            "Cuil",
                            "Apellido",
                            "Nombre",
                            "Calle",
                            "Numero",
                            "Localidad",
                            "Obra Social",
                            "Numero Afiliado"});
                table41.AddRow(new string[] {
                            "23-00000000-3",
                            "",
                            "Pablo",
                            "Av. Roca",
                            "100",
                            "San Miguel de Tucuman",
                            "Red de Seguros",
                            "174853-0"});
#line 79
        await testRunner.GivenAsync("que se completan parcialmente los datos obligatorios del paciente", ((string)(null)), table41, "Given ");
#line hidden
#line 82
        await testRunner.WhenAsync("confirma el registro del paciente", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 83
        await testRunner.ThenAsync("se notifica que falta completar el campo \"Numero\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Registro de paciente con dato mandatorio  \"Localidad\" omitido")]
        [Xunit.TraitAttribute("FeatureTitle", "Registrar Pacientes")]
        [Xunit.TraitAttribute("Description", "Registro de paciente con dato mandatorio  \"Localidad\" omitido")]
        public async System.Threading.Tasks.Task RegistroDePacienteConDatoMandatorioLocalidadOmitido()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Registro de paciente con dato mandatorio  \"Localidad\" omitido", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 85
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 8
    await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table42 = new global::Reqnroll.Table(new string[] {
                            "Cuil",
                            "Apellido",
                            "Nombre",
                            "Calle",
                            "Numero",
                            "Localidad",
                            "Obra Social",
                            "Numero Afiliado"});
                table42.AddRow(new string[] {
                            "23-00000000-3",
                            "",
                            "Pablo",
                            "Av. Roca",
                            "100",
                            "",
                            "Red de Seguros",
                            "174853-0"});
#line 86
        await testRunner.GivenAsync("que se completan parcialmente los datos obligatorios del paciente", ((string)(null)), table42, "Given ");
#line hidden
#line 89
        await testRunner.WhenAsync("confirma el registro del paciente", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 90
        await testRunner.ThenAsync("se notifica que falta completar el campo \"Localidad\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await RegistrarPacientesFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await RegistrarPacientesFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
